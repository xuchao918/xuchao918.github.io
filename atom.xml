<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>起风了</title>
  
  <subtitle>xuchao&#39;s blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-07T15:17:45.543Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>XuChao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何获取Kolla的OpenStack镜像</title>
    <link href="http://yoursite.com/2018/05/07/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96Kolla%E7%9A%84OpenStack%E9%95%9C%E5%83%8F/"/>
    <id>http://yoursite.com/2018/05/07/如何获取Kolla的OpenStack镜像/</id>
    <published>2018-05-07T15:16:22.000Z</published>
    <updated>2018-05-07T15:17:45.543Z</updated>
    
    <content type="html"><![CDATA[<p>由于，OpenStack社区自Queens版本起，便不再提供将打包好的kolla openstack镜像放在<br><a href="http://tarballs.openstack.org/kolla/images/" target="_blank" rel="noopener">该链接上</a></p><p>所以，我们要获取Kolla的OpenStack镜像，就只能依靠自己手动获取。有如下几种方法。</p><h2 id="直接从官方源下载镜像"><a href="#直接从官方源下载镜像" class="headerlink" title="直接从官方源下载镜像"></a>直接从官方源下载镜像</h2><p>安装kolla-ansible<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/openstack/kolla-ansible -b stable/queens</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> pip install kolla-ansible/</span></span><br></pre></td></tr></table></figure></p><p>编辑globals.yml文件，设置相关参数<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># vim /etc/kolla/globals.yml</span></span><br><span class="line"><span class="symbol">kolla_install_type:</span> <span class="string">"source"</span></span><br><span class="line"><span class="symbol">kolla_base_distro:</span> <span class="string">"centos"</span></span><br><span class="line"><span class="symbol">openstack_release:</span> <span class="string">"queens"</span></span><br></pre></td></tr></table></figure></p><p>下载镜像<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> kolla-ansible -i all-in-one bootstrap-servers</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> kolla-ansible pull</span></span><br></pre></td></tr></table></figure></p><h2 id="手动构建镜像"><a href="#手动构建镜像" class="headerlink" title="手动构建镜像"></a>手动构建镜像</h2><p>下载kolla项目<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/openstack/kolla.git -b stable/queens</span></span><br></pre></td></tr></table></figure></p><p>生成kolla-build.conf文件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> pip install tox</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> kolla/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tox -e genconfig</span></span><br></pre></td></tr></table></figure></p><p>构建openstack镜像<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//构建基于centos系统的source源码安装的openstack镜像</span><br><span class="line"># kolla-<span class="keyword">build </span>-t source -<span class="keyword">b </span>centos</span><br><span class="line"></span><br><span class="line">//或者，构建基于centos系统的<span class="keyword">binary二进制包安装的openstack镜像</span></span><br><span class="line"><span class="keyword"># </span>kolla-<span class="keyword">build </span>-t <span class="keyword">binary </span>-<span class="keyword">b </span>centos</span><br></pre></td></tr></table></figure></p><h2 id="自动化拉取kolla镜像"><a href="#自动化拉取kolla镜像" class="headerlink" title="自动化拉取kolla镜像"></a>自动化拉取kolla镜像</h2><p>由于OpenStack社区，已经开始正式将kolla镜像托管在DockerHub上。所以，我们还可以从Docker Hub上直接拉取kolla镜像，由于openstack镜像少则几十，多则上百，因此，这里我编写了一个bash脚本，用于自动化拉取queens版本的kolla镜像。</p><p>为了加快从docker hub上拉取镜像，这里，配置上阿里云的镜像加速器。<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># cat /etc/docker/daemon.json </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"registry-mirrors"</span>: [<span class="string">"https://a5aghnme.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重启docker服务，生效<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> systemctl daemon-reload &amp;&amp; systemctl restart docker</span></span><br></pre></td></tr></table></figure></p><p><strong>拉取queens版本的kolla镜像</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat 01_pull_kolla.sh </span></span><br><span class="line"><span class="meta">#!/usr/bin/bash</span></span><br><span class="line"></span><br><span class="line">image_tag=queens    <span class="comment">#该变量，你可以根据自己需要进行修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># delete images</span></span><br><span class="line">docker images | awk <span class="string">'&#123;print $3&#125;'</span> | xargs docker rmi -f</span><br><span class="line"></span><br><span class="line"><span class="comment"># pull public images</span></span><br><span class="line"><span class="keyword">for</span> public_images <span class="keyword">in</span> memcached kolla-toolbox cron mongodb mariadb rabbitmq keepalived haproxy chrony iscsid tgtd</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  docker pull kolla/centos-source-<span class="variable">$public_images</span>:<span class="variable">$image_tag</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pull monitor manage images</span></span><br><span class="line"><span class="comment"># it is recommended to use telegraf + influxdb + grafana + collectd + Prometheus</span></span><br><span class="line"><span class="keyword">for</span> monitor_images <span class="keyword">in</span> collectd telegraf grafana influxdb prometheus-server prometheus-haproxy-exporter prometheus-node-exporter prometheus-mysqld-exporter</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  docker pull kolla/centos-source-<span class="variable">$monitor_images</span>:<span class="variable">$image_tag</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pull log manage images</span></span><br><span class="line"><span class="keyword">for</span> log_images <span class="keyword">in</span> fluentd elasticsearch kibana</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  docker pull kolla/centos-source-<span class="variable">$log_images</span>:<span class="variable">$image_tag</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pull nova</span></span><br><span class="line"><span class="keyword">for</span> nova <span class="keyword">in</span> nova-compute nova-consoleauth nova-ssh nova-placement-api nova-api nova-compute-ironic nova-consoleauth nova-serialproxy nova-scheduler nova-novncproxy nova-conductor nova-libvirt</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  docker pull kolla/centos-source-<span class="variable">$nova</span>:<span class="variable">$image_tag</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pull keystone</span></span><br><span class="line">docker pull kolla/centos-source-keystone:<span class="variable">$image_tag</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pull freezer</span></span><br><span class="line">docker pull kolla/centos-source-freezer-api:<span class="variable">$image_tag</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pull glance </span></span><br><span class="line"><span class="keyword">for</span> glance <span class="keyword">in</span> glance-api glance-registry</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  docker pull kolla/centos-source-<span class="variable">$glance</span>:<span class="variable">$image_tag</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pull cinder</span></span><br><span class="line"><span class="keyword">for</span> cinder <span class="keyword">in</span> cinder-volume cinder-api cinder-backup cinder-scheduler</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  docker pull kolla/centos-source-<span class="variable">$cinder</span>:<span class="variable">$image_tag</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pull neutron</span></span><br><span class="line"><span class="keyword">for</span> neutron <span class="keyword">in</span> neutron-server neutron-lbaas-agent neutron-dhcp-agent neutron-l3-agent neutron-openvswitch-agent neutron-metadata-agent neutron-server-opendaylight opendaylight</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  docker pull kolla/centos-source-<span class="variable">$neutron</span>:<span class="variable">$image_tag</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pull openvswitch</span></span><br><span class="line"><span class="keyword">for</span> openvswitch <span class="keyword">in</span> openvswitch-db-server openvswitch-vswitchd neutron-openvswitch-agent</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  docker pull kolla/centos-source-<span class="variable">$openvswitch</span>:<span class="variable">$image_tag</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pull ceilometer</span></span><br><span class="line"><span class="keyword">for</span> ceilometer <span class="keyword">in</span> ceilometer-api ceilometer-compute ceilometer-notification ceilometer-central</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  docker pull kolla/centos-source-<span class="variable">$ceilometer</span>:<span class="variable">$image_tag</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pull gnocchi</span></span><br><span class="line"><span class="keyword">for</span> gnocchi <span class="keyword">in</span> gnocchi-metricd gnocchi-api gnocchi-statsd</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  docker pull kolla/centos-source-<span class="variable">$gnocchi</span>:<span class="variable">$image_tag</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pull aodh</span></span><br><span class="line"><span class="keyword">for</span> aodh <span class="keyword">in</span> aodh-evaluator aodh-api aodh-listener aodh-notifier</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  docker pull kolla/centos-source-<span class="variable">$aodh</span>:<span class="variable">$image_tag</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pull heat</span></span><br><span class="line"><span class="keyword">for</span> heat <span class="keyword">in</span> heat-api heat-api-cfn heat-engine</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  docker pull kolla/centos-source-<span class="variable">$heat</span>:<span class="variable">$image_tag</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pull horizon</span></span><br><span class="line">docker pull kolla/centos-source-horizon:<span class="variable">$image_tag</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pull murano</span></span><br><span class="line"><span class="keyword">for</span> murano <span class="keyword">in</span> murano-api murano-engine</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  docker pull kolla/centos-source-<span class="variable">$murano</span>:<span class="variable">$image_tag</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pull magnum</span></span><br><span class="line"><span class="keyword">for</span> magnum <span class="keyword">in</span> magnum-api magnum-conductor</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  docker pull kolla/centos-source-<span class="variable">$magnum</span>:<span class="variable">$image_tag</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pull senlin</span></span><br><span class="line"><span class="keyword">for</span> senlin <span class="keyword">in</span> senlin-api senlin-engine</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  docker pull kolla/centos-source-<span class="variable">$senlin</span>:<span class="variable">$image_tag</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pull sahara</span></span><br><span class="line"><span class="keyword">for</span> sahara <span class="keyword">in</span> sahara-engine sahara-api</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  docker pull kolla/centos-source-<span class="variable">$sahara</span>:<span class="variable">$image_tag</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pull trove</span></span><br><span class="line"><span class="keyword">for</span> trove <span class="keyword">in</span> trove-api trove-taskmanager trove-conductor</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  docker pull kolla/centos-source-<span class="variable">$trove</span>:<span class="variable">$image_tag</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pull swift</span></span><br><span class="line"><span class="keyword">for</span> swift <span class="keyword">in</span> swift-rsyncd swift-proxy-server swift-object-expirer swift-object swift-account swift-container swift-base</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  docker pull kolla/centos-source-<span class="variable">$swift</span>:<span class="variable">$image_tag</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pull ironic</span></span><br><span class="line"><span class="keyword">for</span> ironic <span class="keyword">in</span> ironic-conductor ironic-pxe ironic-api ironic-inspector</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  docker pull kolla/centos-source-<span class="variable">$ironic</span>:<span class="variable">$image_tag</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">docker pull kolla/centos-source-dnsmasq:pike</span><br><span class="line">docker tag kolla/centos-source-dnsmasq:pike kolla/centos-source-dnsmasq:queens</span><br><span class="line">docker rmi -f kolla/centos-source-dnsmasq:pike</span><br><span class="line"></span><br><span class="line"><span class="comment"># pull cloudkitty</span></span><br><span class="line"><span class="keyword">for</span> cloudkitty <span class="keyword">in</span> cloudkitty-api cloudkitty-processor panko-api</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  docker pull kolla/centos-source-<span class="variable">$cloudkitty</span>:<span class="variable">$image_tag</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># pull kuryr</span></span><br><span class="line">docker pull kolla/centos-source-kuryr-libnetwork:<span class="variable">$image_tag</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># save images</span></span><br><span class="line">images=`docker images | grep queens | awk <span class="string">'&#123;print $1&#125;'</span>`</span><br><span class="line">docker save -o kolla_queens_images.tar <span class="variable">$images</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># clean pull's images</span></span><br><span class="line">docker images | awk <span class="string">'&#123;print $3&#125;'</span> | xargs docker rmi -f</span><br></pre></td></tr></table></figure></p><p><strong>将镜像push到本地Registry</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat 02_push_kolla.sh </span></span><br><span class="line"><span class="meta">#!/usr/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># load images</span></span><br><span class="line">docker load --input kolla_queens_images.tar</span><br><span class="line"></span><br><span class="line">registry=172.17.51.27:4000    <span class="comment">#请将该registry地址，改为你自己环境的地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># tag images</span></span><br><span class="line">images=`docker images | grep queens | awk <span class="string">'&#123;print $1&#125;'</span>`</span><br><span class="line"><span class="keyword">for</span> images_tag <span class="keyword">in</span> <span class="variable">$images</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  docker tag <span class="variable">$images_tag</span>:queens <span class="variable">$registry</span>/<span class="variable">$images_tag</span>:queens</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># delete old's images</span></span><br><span class="line">delete_images=`docker images | grep <span class="string">'^kolla'</span> | awk <span class="string">'&#123;print $1&#125;'</span>`</span><br><span class="line"><span class="keyword">for</span> delete_images1 <span class="keyword">in</span> <span class="variable">$delete_images</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  docker rmi <span class="variable">$delete_images1</span>:queens</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># push images</span></span><br><span class="line">push_images=`docker images | grep queens | awk <span class="string">'&#123;print $1&#125;'</span>`</span><br><span class="line"><span class="keyword">for</span> push_images1 <span class="keyword">in</span> <span class="variable">$push_images</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  docker push <span class="variable">$push_images1</span>:queens</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><p>综合，比较以上三种方法的优缺点。这里，推荐使用第三种方法，速度更快，也更便捷。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于，OpenStack社区自Queens版本起，便不再提供将打包好的kolla openstack镜像放在&lt;br&gt;&lt;a href=&quot;http://tarballs.openstack.org/kolla/images/&quot; target=&quot;_blank&quot; rel=&quot;noop
      
    
    </summary>
    
      <category term="OpenStack" scheme="http://yoursite.com/categories/OpenStack/"/>
    
      <category term="Kolla" scheme="http://yoursite.com/categories/OpenStack/Kolla/"/>
    
    
      <category term="Kolla" scheme="http://yoursite.com/tags/Kolla/"/>
    
      <category term="OpenStack" scheme="http://yoursite.com/tags/OpenStack/"/>
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>如何设置OpenStack节点Swap分区</title>
    <link href="http://yoursite.com/2018/05/07/%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AEOpenStack%E8%8A%82%E7%82%B9Swap%E5%88%86%E5%8C%BA/"/>
    <id>http://yoursite.com/2018/05/07/如何设置OpenStack节点Swap分区/</id>
    <published>2018-05-07T13:02:51.000Z</published>
    <updated>2018-05-07T14:09:46.724Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Swap分区介绍"><a href="#Swap分区介绍" class="headerlink" title="Swap分区介绍"></a>Swap分区介绍</h2><p>Swap分区，即交换分区。它的功能就是在物理内存不够的情况下，操作系统先把内存中暂时不用的数据，存到硬盘的交换空间，腾出内存来让别的程序运行，当程序需要用到交换空间内的数据的时候，操作系统再将数据从交换分区恢复到物理内存中。这样，系统总是在物理内存不够时，才进行Swap交换。                </p><h2 id="如何设置Swap分区大小"><a href="#如何设置Swap分区大小" class="headerlink" title="如何设置Swap分区大小"></a>如何设置Swap分区大小</h2><p>以上是SWAP 交换分区的作用。 实际上，我们更关注的应该是SWAP分区的大小问题。 设置多大才是最优的。如下，提供了两种方案。</p><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>在Linux系统中，我们可以参照Red Hat公司为RHEL 7推荐的SWAP空间的大小划分原则，在你没有其他特别需求时，可以作为很好的参考依据。</p><ul><li>内存小于2GB，推荐2倍于内存的swap空间；</li><li>内存2GB~8GB，推荐和内存大小一样的swap空间；</li><li>内存8GB~64GB，推荐至少4GB的swap空间；</li><li>内存大于64GB，推荐至少4GB的swap空间。</li></ul><p><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/storage_administration_guide/ch-swapspace" target="_blank" rel="noopener">原文链接</a></p><p>实际上，系统中交换分区的大小并不取决于物理内存的量，而是取决于系统中内存的负荷，所以在安装系统时要根据具体的业务来设置SWAP的值。</p><p>在OpenStack中，默认的CPU超配比例是1:16，内存超配比例是1:1.5。当宿主机使用swap交换分区来为虚拟机分配内存的时候，则虚拟机的性能将急速下降。生产环境上不建议开启内存超售（建议配置比例1:1）。另外，建议设置nova.conf文件中的reserved_host_memory_mb 参数，即内存预留量（建议至少预留4GB），保证该部分内存不能被虚拟机使用。</p><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>系统在什么情况下才会使用Swap？实际上，并不是等所有的物理内存都消耗完毕之后，才去使用swap的空间，什么时候使用是由swappiness 参数值控制的。<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cat <span class="regexp">/proc/</span>sys<span class="regexp">/vm/</span>swappiness</span><br><span class="line"><span class="number">60</span></span><br></pre></td></tr></table></figure></p><p>该值默认值是60。</p><ul><li>swappiness=0的时候表示最大限度使用物理内存，然后才是 swap空间。</li><li>swappiness＝100的时候表示积极的使用swap分区，并且把内存上的数据及时的搬运到swap空间里面。</li></ul><p>由于，现在服务器的内存一般是上百GB，所以我们可以把这个参数值设置的低一些（如10-30之间），让操作系统尽可能的使用物理内存，降低系统对swap的使用，从而提高宿主机系统和虚拟机的性能。</p><p>永久性修改<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'vm.swappiness=10'</span> &gt;&gt;/etc/sysctl.conf</span></span><br></pre></td></tr></table></figure></p><p>保存，重启就生效了。</p><p>查看系统当前SWAP 空间大小<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> free –h</span></span><br></pre></td></tr></table></figure></p><p><strong>小结</strong></p><p>为了保证主机系统和应用程序的稳定运行（内存不足或泄露，易导致系统或应用崩溃），建议在实际使用过程中，服务器仍然需要创建一定的Swap分区。其分区大小可以结合以上两种方案进行设置，已达到最佳效果。</p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><p><strong>1.释放SWAP 空间</strong></p><p>假设我们的系统出现了性能问题，我们通过vmstat命令看到有大量的swap，而我们的物理内存又很充足，那么我们可以手工把swap 空间释放出来。让进程去使用物理内存，从而提高性能。</p><p>我们对swap 空间的释放，可以通过关闭swap分区，再启动swap 分区来实现。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vmstat 1 5      // 1表示每隔1秒采集一次服务器状态，5表示只采集5次</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> free -h</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> swapon -s      //显示交换分区的使用状况</span></span><br></pre></td></tr></table></figure></p><p>关闭swap 交换分区：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> swapoff /dev/sda2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> swapon -s</span></span><br></pre></td></tr></table></figure></p><p>启用swap分区：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> swapon /dev/sda2</span></span><br></pre></td></tr></table></figure></p><p>验证状态：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> swapon -s</span></span><br></pre></td></tr></table></figure></p><p>Swap分区的拓展和缩小：<a href="https://www.e-learn.cn/content/linux/339010" target="_blank" rel="noopener">https://www.e-learn.cn/content/linux/339010</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Swap分区介绍&quot;&gt;&lt;a href=&quot;#Swap分区介绍&quot; class=&quot;headerlink&quot; title=&quot;Swap分区介绍&quot;&gt;&lt;/a&gt;Swap分区介绍&lt;/h2&gt;&lt;p&gt;Swap分区，即交换分区。它的功能就是在物理内存不够的情况下，操作系统先把内存中暂时不用的数
      
    
    </summary>
    
      <category term="OpenStack" scheme="http://yoursite.com/categories/OpenStack/"/>
    
    
      <category term="OpenStack" scheme="http://yoursite.com/tags/OpenStack/"/>
    
  </entry>
  
  <entry>
    <title>Kolla中配置OpenStack虚机网络vxlan和vlan共存</title>
    <link href="http://yoursite.com/2018/05/03/Kolla%E4%B8%AD%E9%85%8D%E7%BD%AEOpenStack%E8%99%9A%E6%9C%BA%E7%BD%91%E7%BB%9Cvxlan%E5%92%8Cvlan%E5%85%B1%E5%AD%98/"/>
    <id>http://yoursite.com/2018/05/03/Kolla中配置OpenStack虚机网络vxlan和vlan共存/</id>
    <published>2018-05-03T12:59:32.000Z</published>
    <updated>2018-05-07T12:55:48.347Z</updated>
    
    <content type="html"><![CDATA[<p>OpenStack Neutron网络服务定义了四种网络模式：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> tenant_network_type = <span class="built_in">local</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tenant_network_type = vlan   </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tenant_network_type = gre</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tenant_network_type = vxlan</span></span><br></pre></td></tr></table></figure></p><p>这里，本文以vlan、vxlan为例，阐述如何实现OpenStack虚机网络（亦称租户网络、业务网络）同时支持vxlan和vlan两种网络。</p><p><strong>说明</strong></p><ul><li>环境：Openstack queens版本</li><li>部署工具：kolla-ansible</li></ul><p>在kolla-ansible部署节点的/etc/kolla/globals.yml文件中，配置网卡。如下所示。</p><p><img src="/images/globals.png" alt="image"></p><ul><li>eth0：openstack管理网络；vlan 51，交换机端口设置为Access模式</li><li>eth1：虚机网络(vxlan)；vlan 52，交换机端口设置为Access模式</li><li>eth2：外部网络兼虚机网络(vlan)；vlan网段53-54，交换机端口设置为trunk模式，主机不配置IP地址</li></ul><h2 id="在所有网络节点上，操作如下"><a href="#在所有网络节点上，操作如下" class="headerlink" title="在所有网络节点上，操作如下"></a>在所有网络节点上，操作如下</h2><p>修改文件/etc/kolla/neutron-server/ml2_conf.ini</p><p><img src="/images/network1.png" alt="image"> </p><p>修改文件/etc/kolla/neutron-openvswitch-agent/ml2_conf.ini</p><p><img src="/images/network2.png" alt="image"> </p><p>重启neutron容器<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker restart neutron_server neutron_openvswitch_agent</span></span><br></pre></td></tr></table></figure></p><p>在网络节点上，查看br-ex网桥设置情况，如下。</p><p><img src="/images/networkbrex.png" alt="image"> </p><h2 id="在所有计算节点上，操作如下"><a href="#在所有计算节点上，操作如下" class="headerlink" title="在所有计算节点上，操作如下"></a>在所有计算节点上，操作如下</h2><p>修改文件/etc/kolla/neutron-openvswitch-agent/ml2_conf.ini</p><p><img src="/images/compute.png" alt="image"></p><p>创建一个br-ex外部网桥，并关联到主机的eth2物理网卡上。这样，当计算节点上的虚拟机使用vlan网络时，便可以直接通过qbr-&gt;br-int-&gt;br-ex-&gt;eth2连接到外网。（vlan网络的三层路由，建议使用物理路由器，这样性能和稳定性更好，而不需要通过网络节点上的L3 vRouter虚拟路由）。<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># docker exec -<span class="keyword">u</span> root -it neutron_openvswitch_agent ovs-vsctl <span class="built_in">add</span>-<span class="keyword">br</span> <span class="keyword">br</span>-<span class="keyword">ex</span></span><br><span class="line"># docker exec -<span class="keyword">u</span> root -it neutron_openvswitch_agent ovs-vsctl <span class="built_in">add</span>-port <span class="keyword">br</span>-<span class="keyword">ex</span> eth2</span><br></pre></td></tr></table></figure></p><p>最后，重启相关容器<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker restart neutron_openvswitch_agent</span></span><br></pre></td></tr></table></figure></p><p>在计算节点上，查看br-ex网桥设置情况，如下。</p><p><img src="/images/computebrex.png" alt="image"></p><p>创建一个vlan id为53的网段<br><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span> <span class="comment">neutron</span> <span class="comment">net</span><span class="literal">-</span><span class="comment">create</span> <span class="comment">vlan</span><span class="literal">-</span><span class="comment">53</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">shared</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">provider:physical_network</span> <span class="comment">physnet1</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">provider:network_type</span> <span class="comment">vlan</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">provider:segmentation_id</span> <span class="comment">53</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#</span> <span class="comment">neutron</span> <span class="comment">subnet</span><span class="literal">-</span><span class="comment">create</span> <span class="comment">vlan</span><span class="literal">-</span><span class="comment">53</span> <span class="comment">172</span><span class="string">.</span><span class="comment">17</span><span class="string">.</span><span class="comment">53</span><span class="string">.</span><span class="comment">0/24</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">name</span> <span class="comment">provider</span><span class="literal">-</span><span class="comment">53</span><span class="literal">-</span><span class="comment">subnet</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">gateway</span> <span class="comment">172</span><span class="string">.</span><span class="comment">17</span><span class="string">.</span><span class="comment">53</span><span class="string">.</span><span class="comment">1</span></span><br></pre></td></tr></table></figure></p><p>查看创建的网络，如下。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># neutron net-<span class="type">list</span></span><br><span class="line">+--------------------------------------+----------------+----------------------------------+-----------------------------------------------------+</span><br><span class="line">| id                                   | name           | tenant_id                        | subnets                                             |</span><br><span class="line">+--------------------------------------+----------------+----------------------------------+-----------------------------------------------------+</span><br><span class="line">| <span class="number">5</span>d9c4874-e03b<span class="number">-4</span>bde-aee0<span class="number">-947</span>d7dde4860 | vlan<span class="number">-53</span>        | <span class="number">48</span>fbadff0ab84229b429166babbe488f | <span class="number">9</span>bade37c-ff44<span class="number">-4004</span><span class="number">-8e82</span><span class="number">-20</span>d61348fdc0 <span class="number">172.17</span><span class="number">.53</span><span class="number">.0</span>/<span class="number">24</span> |</span><br><span class="line">| <span class="number">7</span>b0152da-a975<span class="number">-4</span>dbf-b35b<span class="number">-437951</span>c66efa | tenant_network | <span class="number">48</span>fbadff0ab84229b429166babbe488f | a45516a4<span class="number">-4</span>ce9<span class="number">-4</span>c2e<span class="number">-8052</span><span class="number">-8</span>c71eae0e219 <span class="number">10.0</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">24</span>    |</span><br><span class="line">| <span class="number">9630</span>cf8b<span class="number">-4072</span><span class="number">-415</span>b-a9a9<span class="number">-99</span>ff815748f8 | public_network | <span class="number">48</span>fbadff0ab84229b429166babbe488f | a98f8c80<span class="number">-78</span>de<span class="number">-43</span>ba-af52-d86c19fc59ef <span class="number">172.17</span><span class="number">.54</span><span class="number">.0</span>/<span class="number">24</span> |</span><br><span class="line">+--------------------------------------+----------------+----------------------------------+-----------------------------------------------------+</span><br></pre></td></tr></table></figure></p><p>最后，创建一个虚拟机并使用该vlan网络。<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># nova boot --flavor <span class="number">1</span>Gmem_1cpu --image centos7 --nic net-id=<span class="number">5</span>d9c4874-e03b<span class="number">-4</span>bde-aee0<span class="number">-947</span>d7dde4860 test_vm</span><br><span class="line"></span><br><span class="line"># nova <span class="type">list</span> | grep test_vm</span><br><span class="line">| f506129b<span class="number">-610</span>f<span class="number">-4e2</span>d<span class="number">-886</span>b<span class="number">-5</span>d791cdcb282 | test_vm | <span class="literal">ACTIVE</span> | -  | Running | vlan<span class="number">-53</span>=<span class="number">172.17</span><span class="number">.53</span><span class="number">.7</span></span><br></pre></td></tr></table></figure></p><p>测试虚拟机网络通信<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ping -c 4 172.17.53.7</span></span><br><span class="line">PING 172.17.53.7 (172.17.53.7) 56(84) bytes of data.</span><br><span class="line">64 bytes <span class="keyword">from</span> 172.17.53.7: <span class="attribute">icmp_seq</span>=1 <span class="attribute">ttl</span>=63 <span class="attribute">time</span>=0.421 ms</span><br><span class="line">64 bytes <span class="keyword">from</span> 172.17.53.7: <span class="attribute">icmp_seq</span>=2 <span class="attribute">ttl</span>=63 <span class="attribute">time</span>=0.503 ms</span><br><span class="line">64 bytes <span class="keyword">from</span> 172.17.53.7: <span class="attribute">icmp_seq</span>=3 <span class="attribute">ttl</span>=63 <span class="attribute">time</span>=0.543 ms</span><br><span class="line">64 bytes <span class="keyword">from</span> 172.17.53.7: <span class="attribute">icmp_seq</span>=4 <span class="attribute">ttl</span>=63 <span class="attribute">time</span>=0.469 ms</span><br></pre></td></tr></table></figure></p><p><strong>br-int和br-ex说明</strong></p><ul><li>br-int</li></ul><p>br-int是OpenVswitch中的集成网桥，类似于一个二层的交换机。上面挂载了大量的agent来提供各种网络服务，另外负责对发往br-ex的流量，实现local vlan转化为外部vlan。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ovs-ofctl dump-flows br-int  </span></span><br><span class="line">NXST_FLOW reply (<span class="attribute">xid</span>=0x4):  </span><br><span class="line"> <span class="attribute">cookie</span>=0x0, <span class="attribute">duration</span>=147294.121s, <span class="attribute">table</span>=0, <span class="attribute">n_packets</span>=224, <span class="attribute">n_bytes</span>=33961, <span class="attribute">idle_age</span>=13, <span class="attribute">hard_age</span>=65534, <span class="attribute">priority</span>=3,in_port=4,dl_vlan=1 <span class="attribute">actions</span>=mod_vlan_vid:101,NORMAL  </span><br><span class="line"> <span class="attribute">cookie</span>=0x0, <span class="attribute">duration</span>=603538.84s, <span class="attribute">table</span>=0, <span class="attribute">n_packets</span>=19, <span class="attribute">n_bytes</span>=2234, <span class="attribute">idle_age</span>=18963, <span class="attribute">hard_age</span>=65534, <span class="attribute">priority</span>=2,in_port=4 <span class="attribute">actions</span>=drop  </span><br><span class="line"> <span class="attribute">cookie</span>=0x0, <span class="attribute">duration</span>=603547.134s, <span class="attribute">table</span>=0, <span class="attribute">n_packets</span>=31901, <span class="attribute">n_bytes</span>=6419756, <span class="attribute">idle_age</span>=13, <span class="attribute">hard_age</span>=65534, <span class="attribute">priority</span>=1 <span class="attribute">actions</span>=NORMAL</span><br></pre></td></tr></table></figure></p><ul><li>br-ex</li></ul><p>br-ex是OpenVswitch中的一个外部网桥，要做的事情很简单，只需要正常转发数据流量即可。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ovs-ofctl dump-flows br-ex  </span></span><br><span class="line">NXST_FLOW reply (<span class="attribute">xid</span>=0x4):  </span><br><span class="line"> <span class="attribute">cookie</span>=0x0, <span class="attribute">duration</span>=6770.969s, <span class="attribute">table</span>=0, <span class="attribute">n_packets</span>=5411, <span class="attribute">n_bytes</span>=306944, <span class="attribute">idle_age</span>=0, <span class="attribute">hard_age</span>=65534, <span class="attribute">priority</span>=0 <span class="attribute">actions</span>=NORMAL</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;OpenStack Neutron网络服务定义了四种网络模式：&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;spa
      
    
    </summary>
    
      <category term="OpenStack" scheme="http://yoursite.com/categories/OpenStack/"/>
    
    
      <category term="Kolla" scheme="http://yoursite.com/tags/Kolla/"/>
    
      <category term="OpenStack" scheme="http://yoursite.com/tags/OpenStack/"/>
    
  </entry>
  
  <entry>
    <title>如何删除Registry中kolla-ansible的镜像</title>
    <link href="http://yoursite.com/2018/04/30/%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4Registry%E4%B8%ADkolla-ansible%E7%9A%84%E9%95%9C%E5%83%8F/"/>
    <id>http://yoursite.com/2018/04/30/如何删除Registry中kolla-ansible的镜像/</id>
    <published>2018-04-30T15:16:19.000Z</published>
    <updated>2018-05-03T13:16:53.453Z</updated>
    
    <content type="html"><![CDATA[<p>出于某些情况，如释放磁盘空间、旧镜像删除等原因，需要我们删除本地Registry仓库中的镜像。本篇文章，将讲解如何在OpenStack环境的kolla-ansible中，删除本地Registry中的镜像。</p><h2 id="Registry中的镜像管理"><a href="#Registry中的镜像管理" class="headerlink" title="Registry中的镜像管理"></a>Registry中的镜像管理</h2><p>查看Registry仓库中现有的镜像：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#curl</span> -XGET http:<span class="comment">//172.17.51.51:4000/v2/_catalog</span></span><br></pre></td></tr></table></figure></p><p>查看Registry仓库中指定的镜像，如这里的centos-source-magnum-conductor。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#curl</span> -XGET http:<span class="comment">//172.17.51.51:4000/v2/kolla/centos-source-magnum-conductor/tags/list</span></span><br></pre></td></tr></table></figure></p><h2 id="如何删除私有-registry-中的镜像"><a href="#如何删除私有-registry-中的镜像" class="headerlink" title="如何删除私有 registry 中的镜像"></a>如何删除私有 registry 中的镜像</h2><p>首先，在默认情况下，docker registry 是不允许删除镜像的，需要在配置文件config.yml中启用。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#vim /etc/docker/registry/config.yml</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">0.1</span></span><br><span class="line"><span class="attr">log:</span></span><br><span class="line"><span class="attr">  fields:</span></span><br><span class="line"><span class="attr">    service:</span> <span class="string">registry</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line"><span class="attr">  cache:</span></span><br><span class="line"><span class="attr">    blobdescriptor:</span> <span class="string">inmemory</span></span><br><span class="line"><span class="attr">  filesystem:</span></span><br><span class="line"><span class="attr">    rootdirectory:</span> <span class="string">/var/lib/registry</span></span><br><span class="line"><span class="attr">  delete:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http:</span></span><br><span class="line"><span class="attr">  addr:</span> <span class="string">:5000</span></span><br><span class="line"><span class="attr">  headers:</span></span><br><span class="line"><span class="attr">    X-Content-Type-Options:</span> <span class="string">[nosniff]</span></span><br><span class="line"><span class="attr">health:</span></span><br><span class="line"><span class="attr">  storagedriver:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    interval:</span> <span class="number">10</span><span class="string">s</span></span><br><span class="line"><span class="attr">    threshold:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>修改后，需要重启registry容器<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">docker restart registry</span></span><br></pre></td></tr></table></figure></p><p>使用API接口 GET /v2/&lt;镜像名&gt;/manifests/<tag> 来取得要删除的镜像:Tag所对应的 digest。比如，要删除kolla/centos-source-magnum-conductor:queens镜像，那么取得 digest 的命令是：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#curl</span> --<span class="selector-tag">header</span> <span class="string">"Accept: application/vnd.docker.distribution.manifest.v2+json"</span> -I -X HEAD http:<span class="comment">//172.17.51.51:4000/v2/kolla/centos-source-magnum-conductor/manifests/queens</span></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Content-Length: <span class="number">8666</span></span><br><span class="line">Content-Type: application/vnd<span class="selector-class">.docker</span><span class="selector-class">.distribution</span><span class="selector-class">.manifest</span><span class="selector-class">.v2</span>+json</span><br><span class="line">Docker-Content-Digest: sha256:e94c4d08520a7f77cbfa0c2d314bc9281d07874b8c7d9337ad5f541832f7d868</span><br><span class="line">Docker-Distribution-Api-Version: registry/<span class="number">2.0</span></span><br><span class="line">Etag: <span class="string">"sha256:e94c4d08520a7f77cbfa0c2d314bc9281d07874b8c7d9337ad5f541832f7d868"</span></span><br><span class="line">X-Content-Type-Options: nosniff</span><br><span class="line">Date: Sat, <span class="number">28</span> Apr <span class="number">2018</span> <span class="number">02</span>:<span class="number">44</span>:<span class="number">46</span> GMT</span><br></pre></td></tr></table></figure></tag></p><p>得到 Docker-Content-Digest:<br><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sha<span class="number">256</span>:e<span class="number">94</span><span class="keyword">c</span><span class="number">4</span>d<span class="number">08520</span>a<span class="number">7</span>f<span class="number">77</span>cbfa<span class="number">0</span><span class="keyword">c</span><span class="number">2</span>d<span class="number">314</span>bc<span class="number">9281</span>d<span class="number">07874</span>b<span class="number">8</span><span class="keyword">c</span><span class="number">7</span>d<span class="number">9337</span>ad<span class="number">5</span>f<span class="number">541832</span>f<span class="number">7</span>d<span class="number">868</span></span><br></pre></td></tr></table></figure></p><p>然后调用API接口 DELETE /v2/&lt;镜像名&gt;/manifests/<digest> 来删除镜像。比如：<br><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#curl -I -X DELETE http://172.17.51.51:4000/v2/kolla/centos-source-magnum-conductor/manifests/sha256:e94c4d08520a7f77cbfa0c2d314bc9281d07874b8c7d9337ad5f541832f7d868</span></span><br><span class="line"><span class="attribute">HTTP/1.1 202 Accepted</span></span><br><span class="line"><span class="attribute">Docker-Distribution-Api-Version</span>: registry/2.0</span><br><span class="line"><span class="attribute">X-Content-Type-Options</span>: nosniff</span><br><span class="line"><span class="attribute">Date</span>: Sat, 28 Apr 2018 03:34:31 GMT</span><br><span class="line"><span class="attribute">Content-Length</span>: 0</span><br><span class="line"><span class="attribute">Content-Type</span>: text/plain; charset=utf-8</span><br></pre></td></tr></table></figure></digest></p><p>至此，镜像已从 registry 中标记删除，外界访问 pull 不到了。但是 registry 的本地空间并未释放，需要垃圾收集才会释放。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">docker <span class="built_in">exec</span> registry bin/registry garbage-collect /etc/docker/registry/config.yml</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;出于某些情况，如释放磁盘空间、旧镜像删除等原因，需要我们删除本地Registry仓库中的镜像。本篇文章，将讲解如何在OpenStack环境的kolla-ansible中，删除本地Registry中的镜像。&lt;/p&gt;
&lt;h2 id=&quot;Registry中的镜像管理&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
    
      <category term="Kolla" scheme="http://yoursite.com/tags/Kolla/"/>
    
      <category term="OpenStack" scheme="http://yoursite.com/tags/OpenStack/"/>
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
  </entry>
  
</feed>
