<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[配置OpenStack虚机网络vxlan和vlan共存]]></title>
    <url>%2F2018%2F05%2F03%2F%E9%85%8D%E7%BD%AEOpenStack%E8%99%9A%E6%9C%BA%E7%BD%91%E7%BB%9Cvxlan%E5%92%8Cvlan%E5%85%B1%E5%AD%98%2F</url>
    <content type="text"><![CDATA[OpenStack Neutron网络服务定义了四种网络模式：1234# tenant_network_type = local# tenant_network_type = vlan # tenant_network_type = gre# tenant_network_type = vxlan 这里，本文以vlan、vxlan为例，阐述如何实现OpenStack虚机网络（亦称租户网络、业务网络）同时支持vxlan和vlan两种网络。 说明 环境：Openstack queens版本 部署工具：kolla-ansible 在kolla-ansible部署节点的/etc/kolla/globals.yml文件中，配置网卡。如下所示。 eth0：openstack管理网络；vlan 51，交换机端口设置为Access模式 eth1：虚机网络(vxlan)；vlan 52，交换机端口设置为Access模式 eth2：外部网络兼虚机网络(vlan)；vlan网段53-54，交换机端口设置为trunk模式，主机不配置IP地址 在所有网络节点上，操作如下修改文件/etc/kolla/neutron-server/ml2_conf.ini 修改文件/etc/kolla/neutron-openvswitch-agent/ml2_conf.ini 重启neutron容器1# docker restart neutron_server neutron_openvswitch_agent 在网络节点上，查看br-ex网桥设置情况，如下。 在所有计算节点上，操作如下修改文件/etc/kolla/neutron-openvswitch-agent/ml2_conf.ini 创建一个br-ex外部网桥，并关联到主机的eth2物理网卡上。这样，当计算节点上的虚拟机使用vlan网络时，便可以直接通过qbr-&gt;br-int-&gt;br-ex-&gt;eth2连接到外网。（vlan网络的三层路由，建议使用物理路由器，这样性能和稳定性更好，而不需要通过网络节点上的L3 vRouter虚拟路由）。12# docker exec -u root -it neutron_openvswitch_agent ovs-vsctl add-br br-ex# docker exec -u root -it neutron_openvswitch_agent ovs-vsctl add-port br-ex eth2 最后，重启相关容器1# docker restart neutron_openvswitch_agent 在计算节点上，查看br-ex网桥设置情况，如下。 创建一个vlan id为53的网段123# neutron net-create vlan-53 --shared --provider:physical_network physnet1 --provider:network_type vlan --provider:segmentation_id 53# neutron subnet-create vlan-53 172.17.53.0/24 --name provider-53-subnet --gateway 172.17.53.1 查看创建的网络，如下。12345678# neutron net-list+--------------------------------------+----------------+----------------------------------+-----------------------------------------------------+| id | name | tenant_id | subnets |+--------------------------------------+----------------+----------------------------------+-----------------------------------------------------+| 5d9c4874-e03b-4bde-aee0-947d7dde4860 | vlan-53 | 48fbadff0ab84229b429166babbe488f | 9bade37c-ff44-4004-8e82-20d61348fdc0 172.17.53.0/24 || 7b0152da-a975-4dbf-b35b-437951c66efa | tenant_network | 48fbadff0ab84229b429166babbe488f | a45516a4-4ce9-4c2e-8052-8c71eae0e219 10.0.0.0/24 || 9630cf8b-4072-415b-a9a9-99ff815748f8 | public_network | 48fbadff0ab84229b429166babbe488f | a98f8c80-78de-43ba-af52-d86c19fc59ef 172.17.54.0/24 |+--------------------------------------+----------------+----------------------------------+-----------------------------------------------------+ 最后，创建一个虚拟机并使用该vlan网络。1234# nova boot --flavor 1Gmem_1cpu --image centos7 --nic net-id=5d9c4874-e03b-4bde-aee0-947d7dde4860 test_vm# nova list | grep test_vm| f506129b-610f-4e2d-886b-5d791cdcb282 | test_vm | ACTIVE | - | Running | vlan-53=172.17.53.7 测试虚拟机网络通信123456# ping -c 4 172.17.53.7PING 172.17.53.7 (172.17.53.7) 56(84) bytes of data.64 bytes from 172.17.53.7: icmp_seq=1 ttl=63 time=0.421 ms64 bytes from 172.17.53.7: icmp_seq=2 ttl=63 time=0.503 ms64 bytes from 172.17.53.7: icmp_seq=3 ttl=63 time=0.543 ms64 bytes from 172.17.53.7: icmp_seq=4 ttl=63 time=0.469 ms br-int和br-ex说明 br-int br-int是OpenVswitch中的集成网桥，类似于一个二层的交换机。上面挂载了大量的agent来提供各种网络服务，另外负责对发往br-ex的流量，实现local vlan转化为外部vlan。12345# ovs-ofctl dump-flows br-int NXST_FLOW reply (xid=0x4): cookie=0x0, duration=147294.121s, table=0, n_packets=224, n_bytes=33961, idle_age=13, hard_age=65534, priority=3,in_port=4,dl_vlan=1 actions=mod_vlan_vid:101,NORMAL cookie=0x0, duration=603538.84s, table=0, n_packets=19, n_bytes=2234, idle_age=18963, hard_age=65534, priority=2,in_port=4 actions=drop cookie=0x0, duration=603547.134s, table=0, n_packets=31901, n_bytes=6419756, idle_age=13, hard_age=65534, priority=1 actions=NORMAL br-ex br-ex是OpenVswitch中的一个外部网桥，要做的事情很简单，只需要正常转发数据流量即可。123# ovs-ofctl dump-flows br-ex NXST_FLOW reply (xid=0x4): cookie=0x0, duration=6770.969s, table=0, n_packets=5411, n_bytes=306944, idle_age=0, hard_age=65534, priority=0 actions=NORMAL]]></content>
      <categories>
        <category>OpenStack</category>
      </categories>
      <tags>
        <tag>Kolla</tag>
        <tag>OpenStack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何删除Registry中kolla-ansible的镜像]]></title>
    <url>%2F2018%2F04%2F30%2F%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4Registry%E4%B8%ADkolla-ansible%E7%9A%84%E9%95%9C%E5%83%8F%2F</url>
    <content type="text"><![CDATA[出于某些情况，如释放磁盘空间、旧镜像删除等原因，需要我们删除本地Registry仓库中的镜像。本篇文章，将讲解如何在OpenStack环境的kolla-ansible中，删除本地Registry中的镜像。 Registry中的镜像管理查看Registry仓库中现有的镜像：1#curl -XGET http://172.17.51.51:4000/v2/_catalog 查看Registry仓库中指定的镜像，如这里的centos-source-magnum-conductor。1#curl -XGET http://172.17.51.51:4000/v2/kolla/centos-source-magnum-conductor/tags/list 如何删除私有 registry 中的镜像首先，在默认情况下，docker registry 是不允许删除镜像的，需要在配置文件config.yml中启用。123456789101112131415161718192021#vim /etc/docker/registry/config.ymlversion: 0.1log: fields: service: registrystorage: cache: blobdescriptor: inmemory filesystem: rootdirectory: /var/lib/registry delete: enabled: truehttp: addr: :5000 headers: X-Content-Type-Options: [nosniff]health: storagedriver: enabled: true interval: 10s threshold: 3 修改后，需要重启registry容器1#docker restart registry 使用API接口 GET /v2/&lt;镜像名&gt;/manifests/ 来取得要删除的镜像:Tag所对应的 digest。比如，要删除kolla/centos-source-magnum-conductor:queens镜像，那么取得 digest 的命令是：123456789#curl --header "Accept: application/vnd.docker.distribution.manifest.v2+json" -I -X HEAD http://172.17.51.51:4000/v2/kolla/centos-source-magnum-conductor/manifests/queensHTTP/1.1 200 OKContent-Length: 8666Content-Type: application/vnd.docker.distribution.manifest.v2+jsonDocker-Content-Digest: sha256:e94c4d08520a7f77cbfa0c2d314bc9281d07874b8c7d9337ad5f541832f7d868Docker-Distribution-Api-Version: registry/2.0Etag: "sha256:e94c4d08520a7f77cbfa0c2d314bc9281d07874b8c7d9337ad5f541832f7d868"X-Content-Type-Options: nosniffDate: Sat, 28 Apr 2018 02:44:46 GMT 得到 Docker-Content-Digest:1sha256:e94c4d08520a7f77cbfa0c2d314bc9281d07874b8c7d9337ad5f541832f7d868 然后调用API接口 DELETE /v2/&lt;镜像名&gt;/manifests/ 来删除镜像。比如：1234567#curl -I -X DELETE http://172.17.51.51:4000/v2/kolla/centos-source-magnum-conductor/manifests/sha256:e94c4d08520a7f77cbfa0c2d314bc9281d07874b8c7d9337ad5f541832f7d868HTTP/1.1 202 AcceptedDocker-Distribution-Api-Version: registry/2.0X-Content-Type-Options: nosniffDate: Sat, 28 Apr 2018 03:34:31 GMTContent-Length: 0Content-Type: text/plain; charset=utf-8 至此，镜像已从 registry 中标记删除，外界访问 pull 不到了。但是 registry 的本地空间并未释放，需要垃圾收集才会释放。1#docker exec registry bin/registry garbage-collect /etc/docker/registry/config.yml]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Kolla</tag>
        <tag>OpenStack</tag>
      </tags>
  </entry>
</search>
